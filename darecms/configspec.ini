# All settings in the top-level of this config file automatically become
# attributes on the global "c" object.  So if you want to access the
# "contact_url" setting, you can just use the c.CONTACT_URL variable.

# There are some features we want to turn on for development which might
# otherwise be turned off, such as pages which would normally only be enabled
# after a deadline or on-site.
dev_box = boolean(default=True)

# List of directories we should look in for our templates
# This list is appeneded to by plugins, we'll look for a template
# in the following directories, stopping once one is found
template_dirs = string_list(default=list('%(module_root)s/templates'))

# Turn on some extremely aggressive optimizations that disable certain expensive elements of page rendering.
# Use this only if you ABSOLUTELY NEED TO and understand what it does, and only use it temporarily under heavy load,
# such as when opening preregistration on the first day and you have the entire internet trying to buy a badge.
# This may cause parts of ubersystem (like badge pricing text, supporter counts, etc) to stop updating, so you
# need to carefully keep an eye out for older data.  Use this if you have no other options. You have been warned -Dom
#
# IMPORTANT NOTE 2: THIS DISABLES BADGE PRICING HIKES FROM UPDATING BASED ON BADGE COUNTS. YOU NEED TO KEEP AN EYE
# ON YOUR BADGE PRICES AS IT WILL NOT INCREASE CORRECTLY WHEN BADGE THRESHOLDS ARE REACHED.
hardcore_optimizations_enabled = boolean(default=False)

# This turns on our automated emails.  See the description in the [secret]
# section below for an explanation of how this works.
send_emails = boolean(default=False)

# All dates/times in our code and emails will use this timezone.  This can be
# any timezone name recogized by the pytz module.
event_timezone = string(default="US/Pacific")

# These can be overridden to use Uber for other events.
# DO NOT override this mid-year because that will cause emails to be re-sent!
organization_name = string(default='DareDoes.Work')
event_name = string(default='%(organization_name)s')

# These are used for web server configuration and for linking back to our
# pages in emails; these definitely needs to be overridden in production.
path = string(default="/cms")
hostname = string(default="localhost")
url_root = string(default="http://localhost:8282")
url_base = string(default="%(url_root)s%(path)s")

# This link is to give users a generic way to contact your organization.
contact_url = string(default="")

# When this is True, the only thing anyone can do is log in as a volunteer to
# view their shift schedule.  All other pages, including admin pages, will be
# disabled, with the idea being that the live database will be move to on-site
# and it would be a bad idea to keep a separate server running in parallel.
uber_shut_down = boolean(default=False)

# Some events may want to store an exact birthdate for attendees. If this option
# is turned on, then all registration forms will display and collect the exact
# birthdate. Turning this off will simply display a drop-down selection of the age
# groups defined below.
collect_exact_birthdate = boolean(default=False)

# Certain events need attendees' full addresses - others will only want some
# information. If this is turned off, attendees are only asked for their zipcode,
# emergency contact number, and cellphone number.
collect_full_address = boolean(default=False)

warn_if_server_browser_time_mismatch = boolean(default=True)

# Admin account emails such as password resets come from this address.
admin_email = string(default="Eli Courtwright <eli@courtwright.org>")

# This is the only non-"mailinator.com" address which a DEV box can send to.  No
# emails are sent from this address, so it doesn't need to be listed as a sender
# in your AWS account.
developer_email = string(default="Daniel Evans <migetman9@gmail.org>")

# These are all just constants which we happen to define here.  You can ignore
# these options and should probably never change or override them.
email_re            = string(default="^[a-zA-Z0-9_\-+.]+@[a-zA-Z0-9_\-+.]+(\.[a-zA-Z0-9_\-+.]+){1,}$")


[secret]
# Config options in this section are accessible as normal through the global
# config object, but are not rendered as Javascript variables and sent to the
# user's web browser.  Put options in this section you would never want being
# public such as email crendtials and lists of banned attendees.

# Used to connect to our Postgres database.
sqlalchemy_url = string(default="postgresql://postgres:cogswell@localhost:5432")

# Turn SEND_EMAILS on and set our AWS keys to allow emails to be sent.  Note
# that if the DEV_BOX setting is True, emails will show up in the database as if
# they were sent (and those emails will be logged), but no emails will be sent
# except to the DEVELOPER_EMAIL address and to any "mailinator.com" address.  So
# this is safe to turn on even in development.
#
# When turning this on in production, you'll need to enable all of of the email
# addresses below which send emails (ADMIN_EMAIL, REGDESK_EMAIL, STAFF_EMAIL,
# MARKETPLACE_EMAIL, and PANELS_EMAIL) in your AWS account or else those emails
# will not be sent.
#
# DO NOT EVER check our AWS keys into source control!  If you want to actually
# send real emails to yourself and mailinator.com addresses in development, set
# these values in your development.ini file, which is NOT checked in.
#
aws_access_key = string(default="")
aws_secret_key = string(default="")


[dates]
# Dates controlling when different site features and emails are turned on and off.  Features
# can be turned off by setting these values to the empty string.  For example, you can turn
# off Dealer registration completely by setting all of the dealer dates to the empty string.
#
# Settings in this section are automatically converted to global variable datetime objects,
# locatized to the timezone specified in the above EVENT_TIMEZONE setting.

__many__ = string

[integer_enums]
__many__ = integer

[[___many___]]
__many__ = string


[enums]
# This section is for defining option sets which are used for dropdowns and
# checkbox groups.  Every sub-section will be turned into two global constants;
# a list of key/value tuples and a dictionary.  The former will have the "opts"
# suffix and the latter will have an "s" appended if it doesn't already end with
# one.  For example, the [[badges]] subsection will generate a BADGE_OPTS list
# and a BADGES dictionary, and the [[access]] subsection will generate SUCCESS
# and SUCCESS_OPTS, etc.
#
# All of the options in each subsection will become integer global contants
# which will be the values used to store these fields in the database and to
# otherwise identify these values in the code.  The string values are used for
# displaying these values to users; see the {{ options() }} tag and the _label
# properties for how to use these.
#
# Some of the subsections have values defined here, because it would break our
# code to have any of their options removed.  For example, we MUST have an
# ATTENDEE_BADGE option, though you can override the display text.  You can
# also add new option to those sections, e.g. new badge types and ribbons.  In
# theory you can also REMOVE items which are already defined here by setting
# their description value to the empty string.  You should only do this if
# you're really sure that you know what you're doing, since removing options
# which the core system relies upon could cause all kinds of problems.

[[access]]
accounts    = string(default="Account Management")
__many__ = string

[[tracking]]
created = string(default="created")
updated = string(default="updated")
deleted = string(default="deleted")
page_viewed = string(default='pageview')

[[__many__]]
__many__ = string

[appconf]
# This is all CherryPy configuration.

[[/]]
tools.add_email_to_error_page.on = boolean(default=True)

# custom logging output:
# turn off normal traceback and header logging on errors, instead use our custom verbose logger that prints more info
tools.log_tracebacks.on = boolean(default=False)
tools.log_headers.on = boolean(default=False)
tools.custom_verbose_logger.on = boolean(default=True)
